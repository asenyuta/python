# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:

    def __init__(self, cellule):
        self.cellule = cellule

    def __str__(self):
        return f'Клетка с количеством ячеек {self.cellule}'

    def __add__(self, other):
        return Cell(self.cellule + other.cellule)

    def __sub__(self, other):
        return Cell(self.cellule - other.cellule) if self.cellule + other.cellule > 0 else print('Отрицательное чило')

    def __mul__(self, other):
        return Cell(self.cellule * other.cellule)

    def __floordiv__(self, other):
        return Cell(self.cellule // other.cellule)

    def make_order(self, cellule_in_row):
        model = ''
        for i in range(int(self.cellule / cellule_in_row)):
            model += '*' * cellule_in_row + '\n'
        if self.cellule % cellule_in_row != 0:
            model += '*' * (self.cellule % cellule_in_row) + '\n'
        return model


cell1 = Cell(23)
cell2 = Cell(3)
print(cell1)
print(cell2)
print(cell1 + cell2)
print(cell1 - cell2)
print(cell1 * cell2)
print(cell1 // cell2)
print(cell1.make_order(4))
print(cell2.make_order(4))
